(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))n(r);new MutationObserver(r=>{for(const o of r)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function s(r){const o={};return r.integrity&&(o.integrity=r.integrity),r.referrerPolicy&&(o.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?o.credentials="include":r.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(r){if(r.ep)return;r.ep=!0;const o=s(r);fetch(r.href,o)}})();const m="https://swapi.dev/api/",g=`${m}planets/`,w=`${m}films/`,S=`${m}people/`,u=document.querySelector("#api-films"),p=document.querySelector("#api-planets"),d=document.querySelector("#api-people"),c=document.querySelector("#output"),_=document.querySelector("#inputSelect"),f=document.querySelector("#inputText"),h=document.querySelector("#btnSearch");let i=[],l=[];async function $(e){try{const s=await(await fetch(e)).json();c.innerHTML="";for(const n of s.results){const r=document.createElement("div");r.classList.add("filmDiv"),r.innerHTML=await T(n),c.appendChild(r)}}catch(t){console.error(t)}}async function A(e,t){i=[];try{await E(e,t),c.innerHTML="",i.forEach(s=>{const n=document.createElement("div");n.classList.add("planetDiv"),H(s).then(o=>n.innerHTML=o),c.appendChild(n)})}catch(s){console.error(s)}}async function L(e,t){l=[];try{await E(e,t),c.innerHTML="",l.forEach(s=>{const n=document.createElement("div");n.classList.add("personDiv"),M(s).then(o=>n.innerHTML=o),c.appendChild(n)})}catch(s){console.error(s)}}async function C(e){let t=1;try{const n=await(await fetch(e)).json();t=Math.ceil(n.count/10)}catch(s){console.error(s)}return t}async function E(e,t){try{const s=await C(e);console.log("pageCounter:",s);let n=0;for(;n<s;){n++;const r=`${e}?page=${n}`,o=`${e}&page=${n}`,P=await(await fetch(t?o:r)).json();for(const y of P.results)e.includes("planet")?i.push(y):l.push(y)}console.log("plnetsARR:",i),console.log("peopleARR:",l)}catch(s){console.error(s)}}async function v(e){const t=[];for(const s of e)try{const r=await(await fetch(s)).json();t.push(r.name)}catch(n){console.error(n)}return t.join(", ")}async function R(e){let t="";try{t=(await(await fetch(e)).json()).name}catch(s){console.error(s)}return t}async function O(e){const t=[];for(const s of e)try{const r=await(await fetch(s)).json();t.push(r.title)}catch(n){console.error(n)}return t.join(", ")}async function T(e){return`
<p class="film_title">${e.title}</p>
<p class="release_date">Release Date: ${e.release_date}</p>
<p class="film_characters">Characters: ${await v(e.characters)}</p>
  `}async function H(e){return`
<p class="planet_name">${e.name}</p>
<p class="climate">Climate: ${e.climate}</p>
<p class="terrain">Terrain: ${e.terrain}</p>
<p class="planet_residents">Residents: ${await v(e.residents)}</p>
  `}async function M(e){return`
<p class="person_name">${e.name}</p>
<p class="gender">Gender: ${e.gender}</p>
<p class="homeworld">Homeworld: ${await R(e.homeworld)}</p>
<p class="person_films">Films:${await O(e.films)}</p>

  `}u==null||u.addEventListener("click",()=>{$(w)});p==null||p.addEventListener("click",()=>{A(g,!1)});d==null||d.addEventListener("click",()=>{L(S,!1)});h==null||h.addEventListener("click",()=>{const e=f==null?void 0:f.value.trim().toLowerCase();let t="";switch(_.value){case"films":return t=`${w}?search=${e}`,$(t);case"planets":return t=`${g}?search=${e}`,A(t,!0);case"people":return t=`${S}?search=${e}`,L(t,!0)}});
